#!/usr/bin/env python

#  Copyright 2012 Malte Janduda
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import yaml
import os
import subprocess
import sys
import re


# Config Singleton
class Config(object):

    __instance = None

    def __new__(cls):
        if cls.__instance == None:
            __instance = type.__new__(cls)
            __instance.name = "The one"
        return __instance
        
####################################################################################################

class Dependency(object):
  name    = ""
  source  = ""
  version = None
  deptype = ""

  def __init__(self, d):
    self.name      = d["dep"]
    self.source    = d["source"]
    if "version" in d:
      self.version = d["version"]
    self.targetDir = Config.dependenciesFolder+"/"+self.name

  def __str__(self):
    return str(self.toDict())

  def update(self):
    pass
      
  def keepVersion(self):
    self.version = self.getVersion()
      
  def releaseVersion(self):
    self.version = None
    
  def getVersion(self):
    pass    

  def toDict(self):
    d = { "dep" : self.name, "source" : self.source, "type" : self.deptype }

    if self.version:
      d["version"] = self.version

    return d

####################################

class DependencyFactory:
  @staticmethod
  def fromDict(d):
    if d["type"] == "git":
      return GitRepo(d)
    if d["type"] == "hg":
      return HgRepo(d)

####################################

class GitRepo(Dependency):
  deptype = "git"

  def ensurePresent(self):
    if not os.path.exists(self.targetDir):
      self.clone()
      if self.version:
        self.ensureVersion()
    else:
      if self.version:
        if self.version != self.getVersion():
          self.pull()
          self.ensureVersion()
      else:
          self.pull()
          
  def update(self):
    self.pull()
    if self.version:
      version = self.getVersion()

  def clone(self):
    ret = subprocess.call(["git", "clone", self.source, self.targetDir], stdout=Config.outstr)
    if not ret == 0:
      raise Exception("$s: could not clone %s to %s" % (ret, self.source, path))
      
  def pull(self):
    print "pulling %s repository %s" % (self.deptype, self.targetDir)
    ret = subprocess.call(["git", "pull"], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not pull from %s in %s" % (ret, self.source, self.targetDir))
   
  def getVersion(self):
    cmd = subprocess.Popen(["git", "rev-parse", "HEAD"], cwd=self.targetDir, stdout=subprocess.PIPE)
    cmd_out, cmd_err = cmd.communicate()
    return re.sub("[^A-Za-z0-9]", "", cmd_out)
    
  def ensureVersion(self):
    ret = subprocess.call(["git", "fetch"], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not fetch from %s in %s" % (ret, self.source, self.targetDir))

####################################

class HgRepo(Dependency):
  deptype = "hg"

  def ensurePresent(self):
    if not os.path.exists(self.targetDir):
      self.clone(self.targetDir)
      if self.version:
        self.ensureVersion()
    else:
      if self.version:
        if self.version != self.getVersion():
          self.pull()
          self.ensureVersion()
      else:
          self.pull()
          self.hgupdate()

          
  def update(self):
    self.pull()
    self.hgupdate()
    if self.version:
      version = self.getVersion()
  
  def clone(self):
    ret = subprocess.call(["hg", "clone", dep.source, path], stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not clone %s to %s" % (ret, self.source, self.targetDir))

  def pull(self):
    print "pulling and updating %s repository %s" % (self.deptype, self.name)
    ret = subprocess.call(["hg", "pull"], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not pull from %s in %s" % (ret, self.source, self.targetDir))

  def hgupdate(self):
    ret = subprocess.call(["hg", "update"], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not update %s" % (ret, self.source, self.targetDir))

  def getVersion(self):
    cmd = subprocess.Popen(["hg", "id", "-i"], cwd=self.targetDir, stdout=subprocess.PIPE)
    cmd_out, cmd_err = cmd.communicate()
    return re.sub("[^A-Za-z0-9]", "", cmd_out)
    
    ret = subprocess.call(["git", "reset", "--hard", self.version], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not reset repo %s to version %s" % (ret, self.name, self.version))

  def ensureVersion(self):
    ret = subprocess.call(["hg", "update", self.version], cwd = self.targetDir, stdout=Config.outstr)
    if not ret == 0:
      raise Exception("%s: could not update repo %s to version %s" % (ret, self.name, self.version))



####################################################################################################

def readYaml():
  stream = open(Config.yamlFile, 'r')
  ymlDict = yaml.load(stream)
  
  depDict = {}
  for d in ymlDict:
    depDict[d["dep"]] = DependencyFactory.fromDict(d) 
  
  return depDict

def saveYaml(depList):
  tmpList = []
  [tmpList.append(dep.toDict()) for dep in depList]

  yaml.dump(tmpList, open(Config.yamlFile,'w'), default_flow_style=False)

def printHelp():
  print """# dyps run 
ensures that every dependency is present in the right version, or - if no version is defined - the latest version.

$ dyps update [dependency]
updates a dependency by pulling from the repository. If it is versioned, the new version number will be saved.

$ dyps update-all
The same like `dyps update` but for all dependencies.

$ dyps keep [dependency]
Adds the dependency's version number to `dyps.yaml`. Now you can be sure you will always get the same changeset.

$ dyps release [dependency]
Releases the dependency's version pinning. At the next `dyps run` the LATEST version will be fetched.

$ dyps import-hg-submodules [.hgsub file]
Imports submodules from a given hgsub file and saves the configuration to your `dyps.yaml` file."""

def importHgSubmodules(path):
  deps = []
  f = open(path, 'r')
  for line in f:
    dep = dict()
    parts = line.split()
    dep["dep"] = parts[0]
    if parts[2].startswith("[git]"):
      dep["type"] = "git"
      dep["source"] = parts[2].lstrip('[git]')
    else:
      dep["type"] = "hg"
      dep["source"] = parts[2]
    dep["version"] = None
    deps.append(Struct(**dep))

  saveYaml(deps)
  
  
####################################################################################################
#                                              MAIN                                                #
####################################################################################################

def main(argv):
  Config.dependenciesFolder = "dependencies"
  Config.yamlFile           = "dyps.yaml"
  Config.outputFile         = "dyps.out"
  Config.outstr             = open(Config.outputFile, "w")

  if(len(argv) == 0 or argv[0] == "help"):
    return printHelp()
  elif(argv[0] == "import-hg-submodules"):
    return importHgSubmodules(argv[1])
    
  if not os.path.exists(Config.dependenciesFolder):
    os.makedirs(Config.dependenciesFolder)
  
  depDict = readYaml()
  depList = depDict.values()
  
  if(argv[0] == "run"):
    [dep.ensurePresent() for dep in depList]  
    
  elif(argv[0] == "update-all"):
    [dep.update() for dep in depList]  
    saveYaml(depList)
    
  elif(argv[0] == "update"):
    depDict[argv[1]].update()
    saveYaml(depList)
    
  elif(argv[0] == "keep"):
    depDict[argv[1]].keepVersion()
    saveYaml(depList)
    
  elif(argv[0] == "release"):
    depDict[argv[1]].releaseVersion()
    saveYaml(depList)
    
  else:
    print "%s is not a valid command" % argv[0]
    print "execute 'dyps help' for a command overview"
    return 99

if __name__ == "__main__":
  sys.exit( main(sys.argv[1:]) )
